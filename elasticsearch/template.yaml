AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon Elasticsearch Service with Amazon Cognito'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: []
Parameters:
  CognitoUserPoolDomain:
    Description: Domain prefix for the sign-in page hosted by Amazon Cognito
    Type: String
    AllowedPattern: ^[a-z0-9\-]*$
    MaxLength: 63
    MinLength: 1

Transform: "AWS::Serverless-2016-10-31"
Resources:

  Elasticsearch:
    Type: AWS::Elasticsearch::Domain
    DependsOn: KibanaUserPoolDomain
    DeletionPolicy: Retain
    Properties:
      ElasticsearchClusterConfig: 
        DedicatedMasterEnabled: true
        DedicatedMasterType: t2.medium.elasticsearch
        DedicatedMasterCount: 3
        InstanceType: i3.large.elasticsearch
        InstanceCount: 2
        ZoneAwarenessConfig:
           AvailabilityZoneCount: 2
        ZoneAwarenessEnabled: true
      ElasticsearchVersion: 7.1
      CognitoOptions:
        Enabled: true
        UserPoolId: !Ref KibanaUserPool
        IdentityPoolId: !Ref KibanaIdentityPool
        RoleArn: !GetAtt CognitoAccessForAmazonES.Arn
      #DomainEndpointOptions:  # Not supported yet
      #  EnforceHTTPS: true
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true
      AccessPolicies: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "${AWS::AccountId}"
                ]
              },
              "Action": [
                "es:*"
              ],
              "Resource": "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*/*"
            }
          ]
        }

  CognitoAccessForAmazonES:
    Type: AWS::IAM::Role
    Properties:
      Description: 'Amazon Elasticsearch role for Kibana authentication.'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonESCognitoAccess
      Path: /service-role/

  KibanaUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true

  KibanaIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      # CognitoIdentityProviders:
      #   - ClientId: !Ref UserPoolClient
      #     ProviderName: !Sub "cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"

  KibanaIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref KibanaIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: AuthenticatedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "es:ESHttp*"
                Resource:
                  - "*"

  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref KibanaIdentityPool
      Roles:
        authenticated: !GetAtt KibanaIdentityRole.Arn

  UserPoolDomainFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: '[CFn Custom Resource] modify a domain prefix for the sign-in page hosted by Amazon Cognito'
      CodeUri: custom_resources/userpool_domain/
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 10
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "cognito-idp:CreateUserPoolDomain"
                - "cognito-idp:DeleteUserPoolDomain"
              Resource:
                - !GetAtt KibanaUserPool.Arn

  KibanaUserPoolDomain:
    Type: Custom::UserPoolDomain
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt UserPoolDomainFunction.Arn
      Domain: !Ref CognitoUserPoolDomain
      UserPoolId: !Ref KibanaUserPool

  ElasticsearchTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: '[CFn Custom Resource] modify a mapping template of Amazon Elasticsearch Service'
      CodeUri: custom_resources/elasticsearch_template/
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 10
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - es:ESHttpPut
                - es:ESHttpDelete
              Resource:
                - !Sub '${Elasticsearch.Arn}/_template/*'

  TweetsTemplate:
    Type: Custom::ElasticsearchTemplate
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt ElasticsearchTemplateFunction.Arn
      Host: !GetAtt Elasticsearch.DomainEndpoint
      Body: '
        {
          "index_patterns": ["tweets-*"],
          "settings": {
            "number_of_shards": 1,
            "number_of_replicas": 1
          },
          "mappings": {
            "_source": {
              "enabled": true
            },
            "properties": {
              "created_at": {
                "type": "date",
                "format": "epoch_second"
              },
              "tweetid": {
                "type": "keyword"
              },
              "text": {
                "type": "text"
              },
              "normalized_text": {
                "type": "text"
              },
              "source": {
                "type": "keyword"
              },
              "filter_level": {
                "type": "keyword"
              },
              "lang": {
                "type": "keyword"
              },
              "hashtags": {
                "type": "keyword"
              },
              "url": {
                "type": "keyword"
              },
              "quote_count": {
                "type": "long"
              },
              "reply_count": {
                "type": "long"
              },
              "retweet_count": {
                "type": "long"
              },
              "favorite_count": {
                "type": "long"
              },
              "coordinates":{
                "type": "geo_point"
              },
              "user": {
                "properties": {
                  "id_str": {
                    "type": "keyword"
                  },
                  "name": {
                    "type": "keyword"
                  },
                  "screen_name": {
                    "type": "keyword"
                  },
                  "followers_count": {
                    "type": "long"
                  },
                  "friends_count": {
                    "type": "long"
                  },
                  "listed_count": {
                    "type": "long"
                  },
                  "favourites_count": {
                    "type": "long"
                  },
                  "favourites_count": {
                    "type": "long"
                  },
                  "lang": {
                    "type": "keyword"
                  }
                }
              },
              "comprehend": {
                "properties": {
                  "text": {
                    "type": "text"
                  },
                  "lang": {
                    "type": "keyword"
                  },
                  "sentiment": {
                    "type": "keyword"
                  },
                  "sentiment_score": {
                    "properties": {
                      "positive": { "type": "double" },
                      "negative":  { "type": "double" },
                      "neutral":  { "type": "double" },
                      "mixed":  { "type": "double" }
                    }
                  },
                  "entities": {
                    "type": "keyword"
                  },
                  "key_phrases": {
                    "type": "keyword"
                  }
                }
              },
              "mecab": {
                "properties": {
                  "keywords": {
                    "type": "keyword"
                  },
                  "wakati": {
                    "type": "keyword"
                  }
                }
              },
              "sudachi": {
                "properties": {
                  "keywords": {
                    "type": "keyword"
                  },
                  "wakati": {
                    "type": "keyword"
                  }
                }
              }
            }
          }
        }'

  ComprehendEntitiesTemplate:
    Type: Custom::ElasticsearchTemplate
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt ElasticsearchTemplateFunction.Arn
      Host: !GetAtt Elasticsearch.DomainEndpoint
      Body: '
        {
          "index_patterns": ["comprehend-entities-*"],
          "settings": {
            "number_of_shards": 1,
            "number_of_replicas": 1
          },
          "mappings": {
            "_source": {
              "enabled": true
            },
            "properties": {
              "score": {
                "type": "double"
              },
              "type": {
                "type": "keyword"
              },
              "text": {
                "type": "keyword"
              },
              "input": {
                "properties": {
                  "text": {
                    "type": "text"
                  },
                  "lang": {
                    "type": "keyword"
                  }
                }
              },
              "metadata": {
                "properties": {
                  "request_id": {
                    "type": "keyword"
                  },
                  "date": {
                    "type": "date",
                    "format": "epoch_second"
                  }
                }
              }
            }
          }
        }'

Outputs:

  Arn:
    Value: !GetAtt Elasticsearch.Arn

  Endpoint:
    Value: !GetAtt Elasticsearch.DomainEndpoint
