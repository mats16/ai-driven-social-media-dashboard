AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI-Driven Social Media Dashboard-Kibana. Template Version 1'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Tweets Configuration
        Parameters:
          - TwitterTermList
          - TwitterLanguages
          - TwitterFilterLevel
          - TwitterReaderDockerImage
      - Label:
          default: AWS Environment Parameters
        Parameters:
          - ApplicationName
          - VpcCIDR
          - PublicSubnet1CIDR
      - Label:
          default: Twitter API Parameters
        Parameters:
          - AuthConsumerKey
          - AuthConsumerSecret
          - AuthAccessToken
          - AuthAccessTokenSecret
Parameters:
  TwitterTermList:
    Description: List of terms for twitter to listen to
    Type: CommaDelimitedList
    Default: "AWS,EC2,RDS,S3"
  TwitterLanguages:
    Description: List of languages to use for the twitter streaming reader
    Type: CommaDelimitedList
    Default: "en,es,fr,de,it,pt,ar,hi,ja,ko,zh"
  TwitterFilterLevel:
    Description: https://developer.twitter.com/en/docs/tweets/filter-realtime/api-reference/post-statuses-filter
    Type: String
    Default: none
    AllowedValues:
      - none
      - low
      - medium
  TwitterReaderDockerImage:
    Description: Twitter Streaming Reader 
    Type: String
    Default: 983035974902.dkr.ecr.us-east-1.amazonaws.com/ai-driven-social-media-dashboard/twitter-reader:latest
  AuthAccessToken:
    Description: Access Token for calling twitter
    Type: String
  AuthAccessTokenSecret:
    Description: Access Token Secret for calling twitter
    Type: String
    NoEcho: True
  AuthConsumerKey:
    Description: Consumer key for access twitter
    Type: String
  AuthConsumerSecret:
    Description: Consumer Secret for access twitter
    Type: String
    NoEcho: True
  ApplicationName:
    Description: Name of the application for naming or tagging AWS resources created by this solution
    Type: String
    Default: social-media-dashboard
    AllowedPattern: ^[a-z\-]*$
    MaxLength: 28
    MinLength: 3
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.193.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.193.10.0/24
  ComprehendEntityScoreThreshold:
    Type: Number
    Default: 0.7
    MaxValue: 1
    MinValue: 0

Transform: "AWS::Serverless-2016-10-31"
Resources:

  AuthConsumerSecretManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AuthConsumerSecretManagerSecret
      SecretString:
        !Ref AuthConsumerSecret

  AuthAccessTokenSecretManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AuthAccessTokenSecretManagerSecret
      SecretString:
        !Ref AuthAccessTokenSecret

  AuthConsumerManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AuthConsumerManagerSecret
      SecretString:
        !Ref AuthConsumerKey

  AuthAccessTokenManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AuthAccessTokenManagerSecret
      SecretString:
        !Ref AuthAccessToken

  TwitterReaderSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2 Twitter Reader
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: TwitterReaderSecurityGroup
      - Key: ResourceGroup
        Value: CloudFormationResource
      - Key: Project
        Value: !Join ['-', [!Ref 'ApplicationName', !Ref 'AWS::Region']]
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "-1"

  TwitterReaderTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
      Policies:
        - PolicyName: PutTweets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: KinesisAccess
                Effect: Allow
                Action:
                  - 'kinesis:PutRecord'
                  - 'kinesis:PutRecords'
                Resource: !GetAtt AnalyzeKinesisStream.Arn
              - Sid: FirehoseAccess
                Effect: Allow
                Action:
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecords'
                Resource: !GetAtt RawFirehoseStream.Arn

  TwitterReaderTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: twitter-auth-secrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                    - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Ref AuthConsumerSecretManagerSecret
                  - !Ref AuthAccessTokenSecretManagerSecret
                  - !Ref AuthConsumerManagerSecret
                  - !Ref AuthAccessTokenManagerSecret

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
          - Key: Name
            Value: !Ref ApplicationName

  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Ref ApplicationName

  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub ${ApplicationName} Public Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId: !Ref VPC
        Tags:
            - Key: Name
              Value: !Sub ${ApplicationName} Public Routes

  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

  TweetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"

  TwitterStreamingReaderTaskDef: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: twitter-streaming-reader
      RequiresCompatibilities: 
        - "FARGATE"
      NetworkMode: awsvpc
      Cpu: "512"
      Memory: "1024"
      TaskRoleArn: !Ref TwitterReaderTaskRole
      ExecutionRoleArn: !Ref TwitterReaderTaskExecutionRole
      ContainerDefinitions: 
        - Name: twitter-reader
          Image: !Ref TwitterReaderDockerImage
          Essential: "true"
          Environment:
            - Name: TWITTER_TOPICS
              Value: !Join [',', !Ref TwitterTermList]
            - Name: TWITTER_LANGUAGES
              Value: !Join [',', !Ref TwitterLanguages]
            - Name: TWITTER_FILTER_LEVEL
              Value: !Ref TwitterFilterLevel
            - Name: ANALYZE_STREAM
              Value: !Ref AnalyzeKinesisStream
            - Name: ARCHIVE_STREAM
              Value: !Ref RawFirehoseStream
            #- Name: AWS_XRAY_TRACING_NAME
            #  Value: twitter-reader
            #- Name: AWS_XRAY_DEBUG_MODE
            #  Value: 'TRUE'
          Secrets:
            - Name: CONSUMER_KEY
              ValueFrom: !Ref AuthConsumerManagerSecret
            - Name: CONSUMER_SECRET
              ValueFrom: !Ref AuthConsumerSecretManagerSecret
            - Name: ACCESS_TOKEN
              ValueFrom: !Ref AuthAccessTokenManagerSecret
            - Name: ACCESS_TOKEN_SECRET
              ValueFrom: !Ref AuthAccessTokenSecretManagerSecret
          ReadonlyRootFilesystem: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref TwitterStreamingReaderLogGroup
              awslogs-stream-prefix: twitter-reader
        #- Name: xray-daemon
        #  Image: amazon/aws-xray-daemon:latest
        #  Essential: "true"
        #  LogConfiguration:
        #    LogDriver: awslogs
        #    Options:
        #      awslogs-region: !Ref AWS::Region
        #      awslogs-group: !Ref TwitterStreamingReaderLogGroup
        #      awslogs-stream-prefix: xray-daemon

  TwitterStreamingReaderLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ApplicationName}
      RetentionInDays: 7

  TwitterStreamingReaderCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref ApplicationName

  TwitterStreamingReaderService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref TwitterStreamingReaderCluster
      ServiceName: twitter-streaming-reader
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref TwitterReaderSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
      TaskDefinition: !Ref TwitterStreamingReaderTaskDef

  AnalyzeKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  IndexingKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  RawFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt TweetsBucket.Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 10
        Prefix: 'raw/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt ArchiveFirehoseRole.Arn

  ArchiveFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt AnalyzeKinesisStream.Arn
        RoleARN: !GetAtt ArchiveFirehoseRole.Arn
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt TweetsBucket.Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 10
        Prefix: 'archives_from_kinesis/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt ArchiveFirehoseRole.Arn

  ArchiveFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref 'AWS::AccountId'
      Policies:
        - PolicyName: KinesisAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kinesis:Get*'
                  - 'kinesis:DescribeStream'
                Resource: !GetAtt AnalyzeKinesisStream.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Sub '${TweetsBucket.Arn}'
                  - !Sub '${TweetsBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/*"

  RouterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Tweets routing function - S3 to Kinesis Data Stream'
      CodeUri: source/router_function/
      Handler: index.lambda_handler
      Runtime: python3.6
      MemorySize: 3008
      Timeout: 900
      Tracing: Active
      Environment:
        Variables:
          ANALYZE_STREAM: !Ref AnalyzeKinesisStream
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Sid: S3Access
              Effect: Allow
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:ListBucket'
                - 's3:DeleteObject'
              Resource:
                - !Sub '${TweetsBucket.Arn}'
                - !Sub '${TweetsBucket.Arn}/*'
            - Sid: KinesisAccess
              Effect: Allow
              Action:
                - 'kinesis:PutRecord'
                - 'kinesis:PutRecords'
              Resource:
                - !GetAtt AnalyzeKinesisStream.Arn

  AnalyzeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Function to analyze tweets  - KinesisStream to KinesisFirehose '
      CodeUri: source/analyze_function/
      Handler: index.lambda_handler
      Runtime: python3.6
      MemorySize: 1024
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          COMPREHEND_ENTITY_SCORE_THRESHOLD: !Ref ComprehendEntityScoreThreshold
          ELASTICSEARCH_HOST: !GetAtt Elasticsearch.DomainEndpoint
          INDEXING_STREAM: !Ref IndexingKinesisStream
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt AnalyzeKinesisStream.Arn
            BatchSize: 500
            StartingPosition: LATEST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Sid: ComprehendAccess
              Effect: Allow
              Action: ['comprehend:DetectEntities', 'comprehend:DetectSentiment', 'comprehend:DetectKeyPhrases']
              Resource: '*'
            - Sid: TranslateAccess
              Effect: Allow
              Action: ['translate:TranslateText']
              Resource: '*'
            - Sid: ElasticsearchHttpAccess
              Effect: Allow
              Action:
                - es:ESHttpPut
                - es:ESHttpPost
              Resource:
                - !Sub '${Elasticsearch.Arn}/*'
            - Sid: KinesisAccess
              Effect: Allow
              Action:
                - 'kinesis:PutRecord'
                - 'kinesis:PutRecords'
              Resource: !GetAtt IndexingKinesisStream.Arn

  SocialMediaGlueDB:
    Type: "AWS::Glue::Database"
    Properties:
      DatabaseInput:
        Name: !Ref ApplicationName
      CatalogId: !Ref AWS::AccountId

  tweets:
    Type: "AWS::Glue::Table"
    Properties:
      TableInput:
        Name: tweets
        StorageDescriptor:
          Compressed: False
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          NumberOfBuckets: -1
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Location: !Sub 's3://${TweetsBucket}/raw/'
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          Columns:
          - Name: coordinates
            Type: struct<type:string,coordinates:array<double>>
          - Name: retweeted
            Type: boolean
          - Name: source
            Type: string
          - Name: entities
            Type: struct<hashtags:array<struct<text:string,indices:array<bigint>>>,urls:array<struct<url:string,expanded_url:string,display_url:string,indices:array<bigint>>>>
          - Name: reply_count
            Type: bigint
          - Name: favorite_count
            Type: bigint
          - Name: geo
            Type: struct<type:string,coordinates:array<double>>
          - Name: id_str
            Type: string
          - Name: timestamp_ms
            Type: bigint
          - Name: truncated
            Type: boolean
          - Name: text
            Type: string
          - Name: retweet_count
            Type: bigint
          - Name: id
            Type: bigint
          - Name: possibly_sensitive
            Type: boolean
          - Name: filter_level
            Type: string
          - Name: created_at
            Type: string
          - Name: place
            Type: struct<id:string,url:string,place_type:string,name:string,full_name:string,country_code:string,country:string,bounding_box:struct<type:string,coordinates:array<array<array<float>>>>>
          - Name: favorited
            Type: boolean
          - Name: lang
            Type: string
          - Name: in_reply_to_screen_name
            Type: string
          - Name: is_quote_status
            Type: boolean
          - Name: in_reply_to_user_id_str
            Type: string
          - Name: user
            Type: struct<id:bigint,id_str:string,name:string,screen_name:string,location:string,url:string,description:string,translator_type:string,protected:boolean,verified:boolean,followers_count:bigint,friends_count:bigint,listed_count:bigint,favourites_count:bigint,statuses_count:bigint,created_at:string,utc_offset:bigint,time_zone:string,geo_enabled:boolean,lang:string,contributors_enabled:boolean,is_translator:boolean,profile_background_color:string,profile_background_image_url:string,profile_background_image_url_https:string,profile_background_tile:boolean,profile_link_color:string,profile_sidebar_border_color:string,profile_sidebar_fill_color:string,profile_text_color:string,profile_use_background_image:boolean,profile_image_url:string,profile_image_url_https:string,profile_banner_url:string,default_profile:boolean,default_profile_image:boolean>
          - Name: quote_count
            Type: bigint
        Parameters: {'classification': 'json'}
      DatabaseName: !Ref SocialMediaGlueDB
      CatalogId: !Ref AWS::AccountId

#  tweetsentiment:
#    Type: "AWS::Glue::Table"
#    Properties:
#      TableInput:
#        Name: tweet_sentiments
#        StorageDescriptor:
#          Compressed: False
#          InputFormat: org.apache.hadoop.mapred.TextInputFormat
#          NumberOfBuckets: -1
#          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
#          Location: !Sub 's3://${TweetsBucket}/sentiment/'
#          SerdeInfo:
#            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
#          Columns:
#          - Name: tweetid
#            Type: bigint
#          - Name: text
#            Type: string
#          - Name: originaltext
#            Type: string
#          - Name: sentiment
#            Type: string
#          - Name: sentimentposscore
#            Type: double
#          - Name: sentimentnegscore
#            Type: double
#          - Name: sentimentneuscore
#            Type: double
#          - Name: sentimentmixedscore
#            Type: double
#        Parameters: {'classification': 'json'}
#      DatabaseName: !Ref SocialMediaGlueDB
#      CatalogId: !Ref AWS::AccountId

#  tweetentities:
#    Type: "AWS::Glue::Table"
#    Properties:
#      TableInput:
#        Name: tweet_entities
#        StorageDescriptor:
#          Compressed: False
#          InputFormat: org.apache.hadoop.mapred.TextInputFormat
#          NumberOfBuckets: -1
#          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
#          Location: !Sub 's3://${TweetsBucket}/entities/'
#          SerdeInfo:
#            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
#          Columns:
#          - Name: tweetid
#            Type: bigint
#          - Name: entity
#            Type: string
#          - Name: type
#            Type: string
#          - Name: score
#            Type: double
#        Parameters: {'classification': 'json'}
#      DatabaseName: !Ref SocialMediaGlueDB
#      CatalogId: !Ref AWS::AccountId

  S3events:
    Type: Custom::S3events
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt S3eventsFunction.Arn
      BucketName: !Ref TweetsBucket
      Events:
        - 's3:ObjectCreated:*'
      Prefix: queued/
      FunctionArn: !GetAtt RouterFunction.Arn
  S3eventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Custom Resource - modify S3 events with Lambda'
      CodeUri: source/custom_resources/s3events/
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 10
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Sid: S3Access
              Effect: Allow
              Action:
                - 's3:PutBucketNotification'
              Resource:
                - !GetAtt TweetsBucket.Arn
            - Sid: LambdaAddPermission
              Effect: Allow
              Action:
                - 'lambda:AddPermission'
                - 'lambda:RemovePermission'
              Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-*'

  Elasticsearch:
    Type: AWS::Elasticsearch::Domain
    DependsOn: KibanaUserPoolDomain
    DeletionPolicy: Retain
    Properties:
      ElasticsearchClusterConfig: 
        DedicatedMasterEnabled: true
        DedicatedMasterType: t2.small.elasticsearch
        DedicatedMasterCount: 3
        InstanceType: i3.large.elasticsearch
        InstanceCount: 2
        ZoneAwarenessConfig:
           AvailabilityZoneCount: 2
        ZoneAwarenessEnabled: true
      ElasticsearchVersion: 7.1
      CognitoOptions:
        Enabled: true
        UserPoolId: !Ref KibanaUserPool
        IdentityPoolId: !Ref KibanaIdentityPool
        RoleArn: !GetAtt CognitoAccessForAmazonES.Arn
      #DomainEndpointOptions:  # Not supported yet
      #  EnforceHTTPS: true
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true
      AccessPolicies: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "${AWS::AccountId}"
                ]
              },
              "Action": [
                "es:*"
              ],
              "Resource": "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ApplicationName}/*"
            }
          ]
        }

  CognitoAccessForAmazonES:
    Type: AWS::IAM::Role
    Properties:
      Description: 'Amazon Elasticsearch role for Kibana authentication.'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonESCognitoAccess
      Path: /service-role/

  KibanaUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true

  KibanaIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      # CognitoIdentityProviders:
      #   - ClientId: !Ref UserPoolClient
      #     ProviderName: !Sub "cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"

  KibanaIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref KibanaIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: AuthenticatedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "es:ESHttp*"
                Resource:
                  - "*"

  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref KibanaIdentityPool
      Roles:
        authenticated: !GetAtt KibanaIdentityRole.Arn

  KibanaUserPoolDomain:
    Type: Custom::UserPoolDomain
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt UserPoolDomainFunction.Arn
      Domain: !Sub '${ApplicationName}-${AWS::AccountId}'
      UserPoolId: !Ref KibanaUserPool
  UserPoolDomainFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Custom Resource - modify a domain prefix for the sign-in page hosted by Amazon Cognito'
      CodeUri: source/custom_resources/userpool_domain/
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 10
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "cognito-idp:CreateUserPoolDomain"
                - "cognito-idp:DeleteUserPoolDomain"
              Resource:
                - !GetAtt KibanaUserPool.Arn

  ElasticsearchTemplate:
    Type: Custom::ElasticsearchTemplate
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt ElasticsearchTemplateFunction.Arn
      Host: !GetAtt Elasticsearch.DomainEndpoint
      Name: tweet
      Body: '
        {
          "index_patterns": ["tweets-*"],
          "settings": {
            "number_of_shards": 1,
            "number_of_replicas": 1
          },
          "mappings": {
            "_source": {
              "enabled": true
            },
            "properties": {
              "tweetid": {
                "type": "keyword"
              },
              "text": {
                "type": "text"
              },
              "source": {
                "type": "keyword"
              },
              "filter_level": {
                "type": "keyword"
              },
              "timestamp": {
                "type": "date",
                "format": "epoch_millis"
              },
              "lang": {
                "type": "keyword"
              },
              "hashtags": {
                "type": "keyword"
              },
              "url": {
                "type": "keyword"
              },
              "comprehend": {
                "properties": {
                  "text": {
                    "type": "text"
                  },
                  "lang": {
                    "type": "keyword"
                  },
                  "sentiment": {
                    "type": "keyword"
                  },
                  "sentiment_score": {
                    "properties": {
                      "positive": { "type": "double" },
                      "negative":  { "type": "double" },
                      "neutral":  { "type": "double" },
                      "mixed":  { "type": "double" }
                    }
                  },
                  "entities": {
                    "type": "keyword"
                  },
                  "key_phrases": {
                    "type": "keyword"
                  }
                }
              },
              "coordinates":{
                "type": "geo_point"
              }
            }
          }
        }'
  ElasticsearchTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Custom Resource - modify a mapping template of Amazon Elasticsearch Service'
      CodeUri: source/custom_resources/elasticsearch_template/
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 10
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - es:ESHttpPut
                - es:ESHttpDelete
              Resource:
                - !Sub '${Elasticsearch.Arn}/_template/*'

Outputs:

  S3ConsoleURL:
    Description: URL to the Lambda Function console
    Value: !Sub 'https://s3.console.aws.amazon.com/s3/buckets/${TweetsBucket}/?region=${AWS::Region}&tab=overview'

  TwitterRawLocation:
    Description: S3 Twitter Raw location.
    Value: !Sub 's3://${TweetsBucket}/raw/'

  KibanaURL:
    Description: URL to the Kibana
    Value: !Sub 'https://${Elasticsearch.DomainEndpoint}/_plugin/kibana/'
